/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IRssFeedsService {
    getAll(): Observable<Feed[]>;
}

@Injectable()
export class RssFeedsService implements IRssFeedsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<Feed[]> {
        let url_ = this.baseUrl + "/api/RssFeeds/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<Feed[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Feed[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<Feed[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Feed.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Feed[]>(<any>null);
    }
}

export interface ISampleDataService {
    weatherForecasts(): Observable<WeatherForecast[]>;
}

@Injectable()
export class SampleDataService implements ISampleDataService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    weatherForecasts(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/SampleData/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherForecasts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherForecasts(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processWeatherForecasts(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

export interface IDeliveryOrderService {
    upsert(request: DeliveryOrderRequest): Observable<FileResponse>;
    cleanUp(): Observable<FileResponse>;
}

@Injectable()
export class DeliveryOrderService implements IDeliveryOrderService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    upsert(request: DeliveryOrderRequest): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/omdb/100/DeliveryOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    cleanUp(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/omdb/100/DeliveryOrder";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCleanUp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCleanUp(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCleanUp(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ISourceService {
    getAll(): Observable<FileResponse>;
}

@Injectable()
export class SourceService implements ISourceService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Source";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IStatisticsService {
    get(lastUpdate: Date | null | undefined): Observable<FileResponse>;
    national(): Observable<FileResponse>;
}

@Injectable()
export class StatisticsService implements IStatisticsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(lastUpdate: Date | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/statistics?";
        if (lastUpdate !== undefined)
            url_ += "lastUpdate=" + encodeURIComponent(lastUpdate ? "" + lastUpdate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    national(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/statistics/national";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processNational(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNational(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processNational(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IUserService {
    getLocations(): Observable<FileResponse>;
    canViewStatistics(): Observable<FileResponse>;
}

@Injectable()
export class UserService implements IUserService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getLocations(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/User/locations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLocations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLocations(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetLocations(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    canViewStatistics(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/User/viewstatistics";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCanViewStatistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCanViewStatistics(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCanViewStatistics(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export class Feed implements IFeed {
    link?: string | undefined;
    title?: string | undefined;
    feedType?: string | undefined;
    author?: string | undefined;
    content?: string | undefined;
    pubDate?: Date;
    publishDate?: string | undefined;

    constructor(data?: IFeed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.link = data["link"];
            this.title = data["title"];
            this.feedType = data["feedType"];
            this.author = data["author"];
            this.content = data["content"];
            this.pubDate = data["pubDate"] ? new Date(data["pubDate"].toString()) : <any>undefined;
            this.publishDate = data["publishDate"];
        }
    }

    static fromJS(data: any): Feed {
        data = typeof data === 'object' ? data : {};
        let result = new Feed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["link"] = this.link;
        data["title"] = this.title;
        data["feedType"] = this.feedType;
        data["author"] = this.author;
        data["content"] = this.content;
        data["pubDate"] = this.pubDate ? this.pubDate.toISOString() : <any>undefined;
        data["publishDate"] = this.publishDate;
        return data; 
    }
}

export interface IFeed {
    link?: string | undefined;
    title?: string | undefined;
    feedType?: string | undefined;
    author?: string | undefined;
    content?: string | undefined;
    pubDate?: Date;
    publishDate?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    dateFormatted?: string | undefined;
    temperatureC?: number;
    summary?: string | undefined;
    temperatureF?: number;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateFormatted = data["dateFormatted"];
            this.temperatureC = data["temperatureC"];
            this.summary = data["summary"];
            this.temperatureF = data["temperatureF"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateFormatted"] = this.dateFormatted;
        data["temperatureC"] = this.temperatureC;
        data["summary"] = this.summary;
        data["temperatureF"] = this.temperatureF;
        return data; 
    }
}

export interface IWeatherForecast {
    dateFormatted?: string | undefined;
    temperatureC?: number;
    summary?: string | undefined;
    temperatureF?: number;
}

export class DeliveryOrderRequest implements IDeliveryOrderRequest {
    transactionId?: string | undefined;
    deliveryOrder?: DeliveryOrder | undefined;

    constructor(data?: IDeliveryOrderRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transactionId = data["transactionId"];
            this.deliveryOrder = data["deliveryOrder"] ? DeliveryOrder.fromJS(data["deliveryOrder"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeliveryOrderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryOrderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionId"] = this.transactionId;
        data["deliveryOrder"] = this.deliveryOrder ? this.deliveryOrder.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IDeliveryOrderRequest {
    transactionId?: string | undefined;
    deliveryOrder?: DeliveryOrder | undefined;
}

export class DeliveryOrder implements IDeliveryOrder {
    deliveryOrderId?: string | undefined;
    transCode?: string | undefined;
    branchId?: number;
    location?: Location | undefined;
    customerId?: string | undefined;
    requestDate?: Date;
    pickupDateTime?: Date | undefined;
    deliveryDateTime?: Date | undefined;
    fulfilmentType?: string | undefined;
    sourceId?: string | undefined;
    holdReleaseFlag?: boolean;
    customerPromise?: string | undefined;
    pickStatus?: string | undefined;
    pickStatusCompleteDateTime?: Date | undefined;
    omuAppPacked?: boolean;
    pickArea?: string | undefined;
    weight?: number;
    spareField?: string | undefined;
    pickers?: Picker[] | undefined;
    packageNotes?: PackageNote[] | undefined;
    lines?: Line[] | undefined;
    deliveryAddress?: string | undefined;
    deliveryStatus?: string | undefined;
    truckNumber?: string | undefined;

    constructor(data?: IDeliveryOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.deliveryOrderId = data["deliveryOrderId"];
            this.transCode = data["transCode"];
            this.branchId = data["branchId"];
            this.location = data["location"] ? Location.fromJS(data["location"]) : <any>undefined;
            this.customerId = data["customerId"];
            this.requestDate = data["requestDate"] ? new Date(data["requestDate"].toString()) : <any>undefined;
            this.pickupDateTime = data["pickupDateTime"] ? new Date(data["pickupDateTime"].toString()) : <any>undefined;
            this.deliveryDateTime = data["deliveryDateTime"] ? new Date(data["deliveryDateTime"].toString()) : <any>undefined;
            this.fulfilmentType = data["fulfilmentType"];
            this.sourceId = data["sourceId"];
            this.holdReleaseFlag = data["holdReleaseFlag"];
            this.customerPromise = data["customerPromise"];
            this.pickStatus = data["pickStatus"];
            this.pickStatusCompleteDateTime = data["pickStatusCompleteDateTime"] ? new Date(data["pickStatusCompleteDateTime"].toString()) : <any>undefined;
            this.omuAppPacked = data["omuAppPacked"];
            this.pickArea = data["pickArea"];
            this.weight = data["weight"];
            this.spareField = data["spareField"];
            if (Array.isArray(data["pickers"])) {
                this.pickers = [] as any;
                for (let item of data["pickers"])
                    this.pickers!.push(Picker.fromJS(item));
            }
            if (Array.isArray(data["packageNotes"])) {
                this.packageNotes = [] as any;
                for (let item of data["packageNotes"])
                    this.packageNotes!.push(PackageNote.fromJS(item));
            }
            if (Array.isArray(data["lines"])) {
                this.lines = [] as any;
                for (let item of data["lines"])
                    this.lines!.push(Line.fromJS(item));
            }
            this.deliveryAddress = data["deliveryAddress"];
            this.deliveryStatus = data["deliveryStatus"];
            this.truckNumber = data["truckNumber"];
        }
    }

    static fromJS(data: any): DeliveryOrder {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryOrderId"] = this.deliveryOrderId;
        data["transCode"] = this.transCode;
        data["branchId"] = this.branchId;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["customerId"] = this.customerId;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["pickupDateTime"] = this.pickupDateTime ? this.pickupDateTime.toISOString() : <any>undefined;
        data["deliveryDateTime"] = this.deliveryDateTime ? this.deliveryDateTime.toISOString() : <any>undefined;
        data["fulfilmentType"] = this.fulfilmentType;
        data["sourceId"] = this.sourceId;
        data["holdReleaseFlag"] = this.holdReleaseFlag;
        data["customerPromise"] = this.customerPromise;
        data["pickStatus"] = this.pickStatus;
        data["pickStatusCompleteDateTime"] = this.pickStatusCompleteDateTime ? this.pickStatusCompleteDateTime.toISOString() : <any>undefined;
        data["omuAppPacked"] = this.omuAppPacked;
        data["pickArea"] = this.pickArea;
        data["weight"] = this.weight;
        data["spareField"] = this.spareField;
        if (Array.isArray(this.pickers)) {
            data["pickers"] = [];
            for (let item of this.pickers)
                data["pickers"].push(item.toJSON());
        }
        if (Array.isArray(this.packageNotes)) {
            data["packageNotes"] = [];
            for (let item of this.packageNotes)
                data["packageNotes"].push(item.toJSON());
        }
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        data["deliveryAddress"] = this.deliveryAddress;
        data["deliveryStatus"] = this.deliveryStatus;
        data["truckNumber"] = this.truckNumber;
        return data; 
    }
}

export interface IDeliveryOrder {
    deliveryOrderId?: string | undefined;
    transCode?: string | undefined;
    branchId?: number;
    location?: Location | undefined;
    customerId?: string | undefined;
    requestDate?: Date;
    pickupDateTime?: Date | undefined;
    deliveryDateTime?: Date | undefined;
    fulfilmentType?: string | undefined;
    sourceId?: string | undefined;
    holdReleaseFlag?: boolean;
    customerPromise?: string | undefined;
    pickStatus?: string | undefined;
    pickStatusCompleteDateTime?: Date | undefined;
    omuAppPacked?: boolean;
    pickArea?: string | undefined;
    weight?: number;
    spareField?: string | undefined;
    pickers?: Picker[] | undefined;
    packageNotes?: PackageNote[] | undefined;
    lines?: Line[] | undefined;
    deliveryAddress?: string | undefined;
    deliveryStatus?: string | undefined;
    truckNumber?: string | undefined;
}

export class Location implements ILocation {
    locationId?: number;
    name?: string | undefined;
    isDepot?: boolean;
    tradingAs?: string | undefined;

    constructor(data?: ILocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.locationId = data["locationId"];
            this.name = data["name"];
            this.isDepot = data["isDepot"];
            this.tradingAs = data["tradingAs"];
        }
    }

    static fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId;
        data["name"] = this.name;
        data["isDepot"] = this.isDepot;
        data["tradingAs"] = this.tradingAs;
        return data; 
    }
}

export interface ILocation {
    locationId?: number;
    name?: string | undefined;
    isDepot?: boolean;
    tradingAs?: string | undefined;
}

export class Picker implements IPicker {
    pickerId?: number;
    name?: string | undefined;
    deliveryOrder?: DeliveryOrder | undefined;

    constructor(data?: IPicker) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pickerId = data["pickerId"];
            this.name = data["name"];
            this.deliveryOrder = data["deliveryOrder"] ? DeliveryOrder.fromJS(data["deliveryOrder"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Picker {
        data = typeof data === 'object' ? data : {};
        let result = new Picker();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pickerId"] = this.pickerId;
        data["name"] = this.name;
        data["deliveryOrder"] = this.deliveryOrder ? this.deliveryOrder.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPicker {
    pickerId?: number;
    name?: string | undefined;
    deliveryOrder?: DeliveryOrder | undefined;
}

export class PackageNote implements IPackageNote {
    packaging?: string | undefined;
    stagingArea?: string | undefined;
    packer?: string | undefined;

    constructor(data?: IPackageNote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.packaging = data["packaging"];
            this.stagingArea = data["stagingArea"];
            this.packer = data["packer"];
        }
    }

    static fromJS(data: any): PackageNote {
        data = typeof data === 'object' ? data : {};
        let result = new PackageNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packaging"] = this.packaging;
        data["stagingArea"] = this.stagingArea;
        data["packer"] = this.packer;
        return data; 
    }
}

export interface IPackageNote {
    packaging?: string | undefined;
    stagingArea?: string | undefined;
    packer?: string | undefined;
}

export class Line implements ILine {
    lineId?: number;
    lineNumber?: number;
    sku?: string | undefined;
    specialOrder?: boolean;
    substitution?: boolean;
    backOrder?: boolean;
    description?: string | undefined;
    weight?: number;
    quantity?: number;
    stockOnHand?: number;
    quantityPicked?: number;
    picker?: string | undefined;
    deliveryOrder?: DeliveryOrder | undefined;

    constructor(data?: ILine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lineId = data["lineId"];
            this.lineNumber = data["lineNumber"];
            this.sku = data["sku"];
            this.specialOrder = data["specialOrder"];
            this.substitution = data["substitution"];
            this.backOrder = data["backOrder"];
            this.description = data["description"];
            this.weight = data["weight"];
            this.quantity = data["quantity"];
            this.stockOnHand = data["stockOnHand"];
            this.quantityPicked = data["quantityPicked"];
            this.picker = data["picker"];
            this.deliveryOrder = data["deliveryOrder"] ? DeliveryOrder.fromJS(data["deliveryOrder"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Line {
        data = typeof data === 'object' ? data : {};
        let result = new Line();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lineId"] = this.lineId;
        data["lineNumber"] = this.lineNumber;
        data["sku"] = this.sku;
        data["specialOrder"] = this.specialOrder;
        data["substitution"] = this.substitution;
        data["backOrder"] = this.backOrder;
        data["description"] = this.description;
        data["weight"] = this.weight;
        data["quantity"] = this.quantity;
        data["stockOnHand"] = this.stockOnHand;
        data["quantityPicked"] = this.quantityPicked;
        data["picker"] = this.picker;
        data["deliveryOrder"] = this.deliveryOrder ? this.deliveryOrder.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ILine {
    lineId?: number;
    lineNumber?: number;
    sku?: string | undefined;
    specialOrder?: boolean;
    substitution?: boolean;
    backOrder?: boolean;
    description?: string | undefined;
    weight?: number;
    quantity?: number;
    stockOnHand?: number;
    quantityPicked?: number;
    picker?: string | undefined;
    deliveryOrder?: DeliveryOrder | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}